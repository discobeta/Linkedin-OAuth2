.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.30)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Net::Linkedin::OAuth2 3"
.TH Net::Linkedin::OAuth2 3 "2015-11-24" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Net::Linkedin::OAuth2 \- An easy way to authenticate users via LinkedIn.
.SH "VERSION"
.IX Header "VERSION"
version 0.3
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
my \f(CW$linkedin\fR = Net::Linkedin::OAuth2\->new( key => 'your\-app\-key', secret	=> 'your\-app\-secret');
.SS "get authorization url({ redirect_uri => 'http://localhost:3000/user/linkedin', scope => ['r_basicprofile','rw_groups','r_emailaddress']})"
.IX Subsection "get authorization url({ redirect_uri => 'http://localhost:3000/user/linkedin', scope => ['r_basicprofile','rw_groups','r_emailaddress']})"
# scope is an array of permissions that your app requires, see http://developer.linkedin.com/documents/authentication#granting for more details, this field is optional
.PP
my \f(CW$authorization_code_url\fR = \f(CW$linkedin\fR\->authorization_code_url(
    redirect_uri => 'url_of_your_app_to_intercept_success', 
    scope    => ['r_basicprofile','rw_groups','r_emailaddress'] 
);
.PP
# convert code response to an access token
# redirect_uri is the url where you will check for the parameter code.
# param('code') is the parameter 'code' that you will get after the user authorizes your app and gets redirected to the redirect_uri (callback) page.
.PP
my \f(CW$token_object\fR = \f(CW$linkedin\fR\->get_access_token( 	
	authorization_code => param('code'), 
	redirect_uri =>       'your\-app\-redirect\-url\-or\-callback'
);
.PP
# use the new token to request user information
.PP
my \f(CW$result\fR = \f(CW$linkedin\fR\->request(
	url    => 'https://api.linkedin.com/v1/people/~:(id,formatted\-name,picture\-url,email\-address)?format=json',
	token  => \f(CW$token_object\fR\->{access_token} 
);
.PP
# we have the email address			
if ($result\->{emailAddress}) {
	# ...
}
.PP
# Or here is an entire login logic or recipe:
.PP
.Vb 2
\&        my $linkedin = Net::Linkedin::OAuth2\->new( key => \*(Aqyour\-app\-key\*(Aq,
\&                                           secret => \*(Aqyour\-app\-secret\*(Aq);
\&        
\&        
\&        # catch the code param and try to convert it into an access_token and get the email address
\&        if (param(\*(Aqcode\*(Aq)) {
\&
\&            my $token_object = $linkedin\->get_access_token(
\&                    authorization_code => param(\*(Aqcode\*(Aq),
\&                    # has to be the same redirect_uri you specified in the code before
\&                    redirect_uri =>       \*(Aqyour\-app\-redirect\-uri\-or\-callback\-url\*(Aq
\&            );
\&            
\&            my $result = $linkedin\->request(
\&                url    => \*(Aqhttps://api.linkedin.com/v1/people/~:(id,formatted\-name,picture\-url,email\-address)?format=json\*(Aq,
\&                        token  => $token_object\->{access_token} );
\&
\&                if ($result\->{emailAddress}) {
\&                        # we have the email address, authenticate the user and redirect somewhere..
\&                        # ....
\&                        
\&                        return;
\&                } else {
\&                        # we did not get an email address
\&                        # redirect to try again?
\&                        
\&                        return;
\&                }
\&            
\&        }
\&        
\&        # get the url for permissions
\&        
\&        my $authorization_code_url = $linkedin\->authorization_code_url(
\&                # this field is required
\&            redirect_uri => \*(Aqyour\-app\-redirect\*(Aq, 
\&            #array of permissions that your app requires, see http://developer.linkedin.com/documents/authentication#granting for more details, this field is optional
\&            scope    => [\*(Aqr_basicprofile\*(Aq,\*(Aqrw_groups\*(Aq,\*(Aqr_emailaddress\*(Aq] 
\&        );
\&        
\&        #redirect the user to get their permission
\&        redirect($authorization_code_url);
\&
\&        # and catch an error back from linked in
\&        if (param(\*(Aqerror\*(Aq)) {
\&            # handle the error
\&            # if the user denied, redirect to try again...
\&        }
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.Vb 1
\&        http://developer.linkedin.com/documents
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Asaf Klibansky
.PP
discobeta@gmail.com
.SH "METHODS"
.IX Header "METHODS"
.SS "authorization_code_url( { redirect_uri => '...', scope => '...'} )"
.IX Subsection "authorization_code_url( { redirect_uri => '...', scope => '...'} )"
.RS 4
\&\fBDefinition:\fR This method is used to get the url required to authenticate the 
user via LinkedIn OAuth2.
\&\fIIt assumes that you have a linkedin api key and secret which you may obtain 
here https://www.linkedin.com/secure/developer.\fR  Basically this builds the 
url where you should redirect the user to obtain their permission to access 
certain information (scope) on linkedin.
.Sp
\&\fBAccepts:\fR a hash or hashref of arguments.  They must include the 
necessary information to build the url.  
\&\fIredirect_url\fR is a url where the user should be redirect to after successfuly
authorizing (or not) and should be a method ready to capture the 'code' or 
\&'error' parameters.'
\&\fIscope\fR scope is an array of permissions that your app requires, 
see http://developer.linkedin.com/documents/authentication#granting for 
more details, this field is optional
.Sp
\&\fBReturns:\fR This will return a string containing the url where the user should 
be redirect to in order to obtain their linkedin permissions.
=back
.RE
.SS "get_access_token( { authorization_code => '...', redirect_uri => '...'} )"
.IX Subsection "get_access_token( { authorization_code => '...', redirect_uri => '...'} )"
.RS 4
\&\fBDefinition:\fR This method is used to convert the parameter 'code' that we
got from facebook after obtaining the user permissions into an access token 
that we can later use to access the LinkedIn \s-1API.\s0
.Sp
\&\fBAccepts:\fR a hash or hashref of arguments.  They must include the 
necessary information to convert the code.  
\&\fIauthorization_code\fR is the parameter linkedin provided you with after 
successfully obtaining a user's permission. 
\&\fIredirect_uri\fR is a url where the user should be redirect to after successfuly
authorizing (or not) and should be a method ready to capture the 'code' or 
\&'error' parameters.'
.Sp
\&\fBReturns:\fR This will return a hash containing an access_token and an expires_in keys and values
.RE
.SS "new( { key => '...', secret => '...', scope => ['...'] } )"
.IX Subsection "new( { key => '...', secret => '...', scope => ['...'] } )"
.RS 4
\&\fBDefinition:\fR This method is used to convert the parameter 'code' that we
got from facebook after obtaining the user permissions into an access token 
that we can later use to access the LinkedIn \s-1API.\s0
.Sp
\&\fBAccepts:\fR a hash or hashref of arguments.  They must include the 
necessary information to convert the code.  
\&\fIkey\fR is the key linkedin provided you with when you create an app. See
 https://www.linkedin.com/secure/developer for more details.
\&\fIsecret\fR is tha app secret that linkedin provided you with when you create 
an app.
\&\fIscope\fR scope is an array of permissions that your app requires, 
see http://developer.linkedin.com/documents/authentication#granting for 
more details, this field is optional
.Sp
\&\fBReturns:\fR This will create an interface to the linked in \s-1API\s0
.RE
.SS "request( { url => '...', token => '...' } )"
.IX Subsection "request( { url => '...', token => '...' } )"
.RS 4
\&\fBDefinition:\fR This method is used to access the linkedin api.
.Sp
\&\fBAccepts:\fR a hash or hashref of arguments.  They must include the 
necessary information to convert the code.  
\&\fIurl\fR is the linkedin \s-1API\s0 url to access. See
 https://developer.linkedin.com/docs for more details.
\&\fItoken\fR is a valid token that you retrieved from a successful 
linkedin authentication.
.Sp
\&\fBReturns:\fR This will return a scalar with the results from a given url
.RE
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (C) 2015 Asaf Klibansky. All Rights Reserved.
.PP
This program and library is free software; 
you can redistribute it and/or modify it under the same terms as Perl itself.
